// ü§ñ SERVI√áO DEDICADO PARA INTEGRA√á√ÉO COM GEMINI AI
import { GEMINI_CONFIG, GEMINI_UTILS, GEMINI_PROMPTS, ERROR_MESSAGES } from '../utils/constants.js'

class GeminiService {
    constructor() {
        this.apiKey = import.meta.env.VITE_GEMINI_API_KEY
        this.baseUrl = GEMINI_CONFIG.BASE_URL
        this.model = GEMINI_CONFIG.MODEL

        if (!this.apiKey) {
            console.warn('‚ö†Ô∏è Chave da API Gemini n√£o configurada')
        }
    }

    /**
     * üîó M√©todo principal para gerar conte√∫do com Gemini AI
     * @param {string} prompt - Prompt para enviar para a IA
     * @param {Object} options - Op√ß√µes de configura√ß√£o
     * @returns {Promise<string>} - Texto gerado pela IA
     */
    async generateContent(prompt, options = {}) {
        try {
            // Validar se a API key est√° configurada
            if (!this.apiKey) {
                throw new Error('Chave da API Gemini n√£o configurada. Verifique o arquivo .env')
            }

            // Configura√ß√µes padr√£o + op√ß√µes personalizadas
            const config = {
                ...GEMINI_CONFIG.GENERATION_CONFIG,
                ...options.generationConfig
            }

            const safetySettings = options.safetySettings || GEMINI_CONFIG.SAFETY_SETTINGS

            // Construir URL da API
            const url = `${this.baseUrl}/${this.model}:generateContent?key=${this.apiKey}`

            // Payload da requisi√ß√£o
            const payload = {
                contents: [{
                    parts: [{
                        text: prompt
                    }]
                }],
                generationConfig: config,
                safetySettings: safetySettings
            }

            console.log('ü§ñ Enviando requisi√ß√£o para Gemini AI...', {
                url: url.replace(this.apiKey, 'API_KEY_HIDDEN'),
                prompt: prompt.substring(0, 100) + '...',
                config
            })

            // Fazer requisi√ß√£o para a API
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            })

            // Verificar se a resposta foi bem-sucedida
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}))
                console.error('‚ùå Erro na API Gemini:', response.status, errorData)

                // Tratar diferentes tipos de erro
                switch (response.status) {
                    case 400:
                        throw new Error(`${ERROR_MESSAGES.VALIDATION_ERROR}: ${errorData.error?.message || 'Requisi√ß√£o inv√°lida'}`)
                    case 401:
                        throw new Error(ERROR_MESSAGES.GEMINI_INVALID_KEY)
                    case 403:
                        throw new Error(`${ERROR_MESSAGES.UNAUTHORIZED}: ${errorData.error?.message || 'Acesso negado'}`)
                    case 429:
                        throw new Error(ERROR_MESSAGES.GEMINI_QUOTA_EXCEEDED)
                    case 500:
                        throw new Error(`${ERROR_MESSAGES.SERVER_ERROR}: ${errorData.error?.message || 'Erro interno'}`)
                    default:
                        throw new Error(`${ERROR_MESSAGES.GEMINI_ERROR}: ${response.status}`)
                }
            }

            // Parse da resposta
            const data = await response.json()
            console.log('‚úÖ Resposta recebida do Gemini:', {
                candidates: data.candidates?.length || 0,
                finishReason: data.candidates?.[0]?.finishReason
            })

            // Validar e extrair texto da resposta
            if (!GEMINI_UTILS.validateResponse(data)) {
                console.error('‚ùå Resposta inv√°lida:', data)

                // Verificar se o conte√∫do foi bloqueado
                if (data.candidates?.[0]?.finishReason === 'SAFETY') {
                    throw new Error(ERROR_MESSAGES.GEMINI_CONTENT_BLOCKED)
                }

                throw new Error('Resposta inv√°lida da API Gemini')
            }

            const generatedText = GEMINI_UTILS.extractText(data)
            console.log('üìÑ Texto extra√≠do com sucesso:', generatedText.substring(0, 200) + '...')

            return generatedText

        } catch (error) {
            console.error('‚ùå Erro no GeminiService.generateContent:', error)
            throw error
        }
    }

    /**
     * üéØ M√©todo espec√≠fico para gerar planos de viagem
     * @param {Object} travelData - Dados da viagem
     * @returns {Promise<Object>} - Plano de viagem estruturado
     */
    async generateTravelPlan(travelData) {
        try {
            const { destination, duration, travelType, travelers, budget, startDate } = travelData

            // Gerar prompt espec√≠fico para viagem
            const prompt = GEMINI_PROMPTS.TRAVEL_PLAN(
                destination,
                duration,
                travelType,
                travelers,
                budget,
                startDate
            )

            // Gerar conte√∫do com configura√ß√µes otimizadas para viagem
            const generatedText = await this.generateContent(prompt, {
                generationConfig: {
                    temperature: 0.7, // Criatividade moderada
                    maxOutputTokens: 4096, // Resposta detalhada
                    topP: 0.8,
                    topK: 40
                }
            })

            // Fazer parse do JSON retornado
            const travelPlan = GEMINI_UTILS.parseJsonSafely(generatedText)

            if (!travelPlan) {
                console.warn('‚ö†Ô∏è Falha no parse do JSON, gerando plano de fallback')
                return this.createFallbackPlan(travelData)
            }

            // Validar estrutura do plano
            if (!this.validateTravelPlan(travelPlan)) {
                console.warn('‚ö†Ô∏è Plano gerado tem estrutura inv√°lida, usando fallback')
                return this.createFallbackPlan(travelData)
            }

            console.log('‚úÖ Plano de viagem gerado com sucesso!')
            return travelPlan

        } catch (error) {
            console.error('‚ùå Erro ao gerar plano de viagem:', error)

            // Em caso de erro, retornar plano de fallback
            console.log('üõ°Ô∏è Usando plano de fallback devido ao erro')
            return this.createFallbackPlan(travelData)
        }
    }

    /**
     * ‚úÖ Validar se o plano de viagem tem a estrutura correta
     * @param {Object} plan - Plano de viagem
     * @returns {boolean} - True se v√°lido
     */
    validateTravelPlan(plan) {
        const requiredSections = ['baggage', 'tourism', 'budget', 'weather', 'useful_tips']

        return plan &&
            typeof plan === 'object' &&
            requiredSections.every(section =>
                plan[section] && typeof plan[section] === 'object'
            )
    }

    /**
     * üõ°Ô∏è Criar plano de fallback quando a IA falha
     * @param {Object} travelData - Dados da viagem
     * @returns {Object} - Plano de viagem padr√£o
     */
    createFallbackPlan(travelData) {
        const { destination, duration, travelType, travelers, budget } = travelData

        return {
            baggage: {
                clothes: [
                    `Roupas adequadas ao clima de ${destination}`,
                    'Sapatos confort√°veis para caminhadas',
                    'Roupas casuais para o dia a dia',
                    'Roupas elegantes para ocasi√µes especiais',
                    'Roupas √≠ntimas suficientes para a viagem'
                ],
                hygiene: [
                    'Escova e pasta de dentes',
                    'Shampoo e condicionador',
                    'Desodorante',
                    'Protetor solar',
                    'Medicamentos pessoais'
                ],
                accessories: [
                    '√ìculos de sol',
                    'Carteira e documentos',
                    'Rel√≥gio',
                    'Acess√≥rios locais apropriados'
                ],
                electronics: [
                    'Carregador de celular',
                    'C√¢mera fotogr√°fica',
                    'Adaptador de tomada local',
                    'Power bank'
                ],
                documents: [
                    'Passaporte ou RG',
                    'Passagens de viagem',
                    'Reservas de hotel',
                    'Seguro viagem'
                ],
                luggage_size: 'Mala de tamanho m√©dio adequada para a dura√ß√£o da viagem'
            },
            tourism: {
                attractions: [
                    `Principais pontos tur√≠sticos de ${destination}`,
                    'Museus e centros culturais locais',
                    'Parques e √°reas naturais',
                    'Monumentos hist√≥ricos',
                    'Centros de compras e mercados'
                ],
                hidden_gems: [
                    'Lugares √∫nicos conhecidos pelos locais',
                    'Restaurantes tradicionais aut√™nticos',
                    'Miradouros e pontos de vista especiais'
                ],
                daily_itinerary: [
                    'Planejamento personalizado ser√° criado com base nas suas prefer√™ncias',
                    'Roteiro flex√≠vel adaptado ao seu estilo de viagem',
                    'Atividades balanceadas entre cultura e lazer'
                ],
                food_recommendations: [
                    `Pratos t√≠picos de ${destination}`,
                    'Restaurantes bem avaliados localmente',
                    'Experi√™ncias gastron√¥micas aut√™nticas',
                    'Op√ß√µes para diferentes or√ßamentos'
                ],
                cultural_tips: [
                    'Costumes locais importantes',
                    'Etiqueta social e de neg√≥cios',
                    'Tradi√ß√µes e festivais da regi√£o'
                ],
                transportation: [
                    'Transporte p√∫blico local',
                    'Op√ß√µes de t√°xi e rideshare',
                    'Aluguel de ve√≠culos se necess√°rio'
                ]
            },
            budget: {
                accommodation: 'R$ 150-300/dia',
                food: 'R$ 80-150/dia',
                transportation: 'R$ 50-100/dia',
                activities: 'R$ 100-200/dia',
                total_estimated: `R$ ${(parseInt(duration) || 7) * 400} - R$ ${(parseInt(duration) || 7) * 700}`,
                money_saving_tips: [
                    'Reserve acomoda√ß√µes com anteced√™ncia',
                    'Use transporte p√∫blico quando poss√≠vel',
                    'Coma em restaurantes locais'
                ]
            },
            weather: {
                climate_description: `Clima t√≠pico de ${destination} na √©poca escolhida`,
                temperature_range: 'Temperaturas moderadas',
                rain_probability: 'Verifique previs√£o antes da viagem',
                what_to_expect: 'Condi√ß√µes clim√°ticas adequadas para turismo'
            },
            useful_tips: [
                `Pesquise sobre a cultura de ${destination}`,
                'Mantenha c√≥pias digitais dos documentos',
                'Aprenda algumas palavras b√°sicas do idioma local',
                'Verifique requisitos de visto se necess√°rio',
                'Contrate seguro viagem apropriado'
            ]
        }
    }

    /**
     * üîÑ M√©todo para melhorar planos existentes
     * @param {Object} existingPlan - Plano existente
     * @param {string} feedback - Feedback do usu√°rio
     * @returns {Promise<Object>} - Plano melhorado
     */
    async improveTravelPlan(existingPlan, feedback) {
        try {
            const prompt = GEMINI_PROMPTS.TRAVEL_PLAN_REVIEW(existingPlan, feedback)
            const generatedText = await this.generateContent(prompt)
            const improvedPlan = GEMINI_UTILS.parseJsonSafely(generatedText)

            return improvedPlan || existingPlan
        } catch (error) {
            console.error('‚ùå Erro ao melhorar plano:', error)
            return existingPlan
        }
    }

    /**
     * üìä M√©todo para obter estat√≠sticas de uso
     * @returns {Object} - Estat√≠sticas do servi√ßo
     */
    getStats() {
        return {
            apiKeyConfigured: !!this.apiKey,
            model: this.model,
            baseUrl: this.baseUrl,
            fallbackEnabled: true
        }
    }
}

// üè≠ Singleton instance
const geminiService = new GeminiService()

export default geminiService

// üîß Fun√ß√µes utilit√°rias para uso direto
export const generateTravelPlan = (travelData) => geminiService.generateTravelPlan(travelData)
export const improveTravelPlan = (existingPlan, feedback) => geminiService.improveTravelPlan(existingPlan, feedback)
export const getGeminiStats = () => geminiService.getStats()